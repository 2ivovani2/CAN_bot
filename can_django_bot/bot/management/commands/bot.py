from typing import Pattern
from django.core.management.base import BaseCommand
from django.conf import settings

from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, LabeledPrice
from telegram.ext import CallbackContext, Filters, MessageHandler, Updater, CommandHandler, CallbackQueryHandler, PreCheckoutQueryHandler, ConversationHandler
from telegram.utils.request import Request


from ...models import *

def log_errors(f):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞, –≤—ã–≤–æ–¥—è—â–∞—è –≤—Å–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        @f:function - —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    """
    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        
        except Exception as e:
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}"
            print(error_message)
            raise e

    return inner

def user_get_by_update(update: Update):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è django instance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    if update.message:
        message = update.message
    else:
        message = update.callback_query.message


    fullname = ''
    if message.chat.first_name:
        fullname += message.chat.first_name
    if message.chat.last_name:
        fullname += ' ' + message.chat.last_name

    if fullname.strip() == '':
        fullname = message.chat.username

    instance, created = TGUser.objects.update_or_create(
        external_id = message.chat.id,
        username = message.chat.username,
        name = fullname
    )

    return instance

@log_errors
def start_command_handler(update:Update, context:CallbackContext):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
    """

    user = user_get_by_update(update)
    start_reply_markup = InlineKeyboardMarkup([
        [
            InlineKeyboardButton('–û —Å–µ—Ä–≤–∏—Å–µ ‚ö°Ô∏è', callback_data='keyboard_help')
        ],
        [
            InlineKeyboardButton('–û—Ç—á–µ—Ç WB üìä', callback_data='wb_report'),
            InlineKeyboardButton('–û—Ç—á–µ—Ç OZON üìä', callback_data='ozon_report')
        ],
        [
            InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å üíé', callback_data='balance_info'),
            InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç üí∞', callback_data='balance_add')
        ],
        [
            InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ –æ—Ç—á–µ—Ç üóÇ', callback_data='demo_report')
        ],
        
    ])

    context.bot.send_message(
        chat_id=user.external_id,
        text=f'‚úãüèº –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, <b>{user.name}</b>!\n\n–ó–∞–¥–∞—á–∞ –±–æ—Ç–∞ ‚Äì –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö –∏ –æ—Ç–∑—ã–≤–∞—Ö –Ω–∞ –Ω–∏—Ö. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∏–∂–µ:',
        reply_markup=start_reply_markup,
        parse_mode = ParseMode.HTML
    )


@log_errors
def help_command_handler(update:Update, context:CallbackContext):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
    """
    
    user = user_get_by_update(update)

    context.bot.send_message(
        chat_id=user.external_id,
        text=f'üìä <b>–û—Å–Ω–æ–≤–Ω–æ–µ</b>:\n–≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö. –í—ã –±—É–¥–µ—Ç–µ –∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞—Ö –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞—Ö –≤–∞—à–∏—Ö –∫–æ–Ω–∫—É—Ä–µ—Ç–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ–º–æ-–æ—Ç—á–µ—Ç –∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üòÆ‚Äçüí®\n\nüíª <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n{settings.COMMANDS_STRING}\n\nüí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–≤–Ω–∞ <i><b>1000‚ÇΩ</b></i>, –Ω–æ —á–µ–º –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã –±—É–¥–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, —Ç–µ–º –º–µ–Ω—å—à–µ –±—É–¥–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å.\n\nüìØ <b>–î—Ä—É–≥–æ–µ</b>:\n–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ç–µ–º–∞—Ç–∏–∫–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ @i_vovani –∏–ª–∏ @fathutnik –∏ –º—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ–¥ –≤–∞—Å.',
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ –æ—Ç—á–µ—Ç üóÇ', callback_data='demo_report')
            ],
            [
                InlineKeyboardButton('–û—Ç—á–µ—Ç WB üìä', callback_data='wb_report'),
                InlineKeyboardButton('–û—Ç—á–µ—Ç OZON üìä', callback_data='ozon_report')
            ],

        ]),
        parse_mode = ParseMode.HTML
    )

@log_errors
def pre_checkout_handler(update:Update, context:CallbackContext):
    """
        –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ—Ç–¥–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã
    """

    chat_id = update.to_dict()['pre_checkout_query']['from']['id']
    user = TGUser.objects.get(external_id=chat_id)

    query_id = update.to_dict()['pre_checkout_query']['id']

    total_amount = int(str(update.to_dict()['pre_checkout_query']['total_amount'])[:-2])

    success = context.bot.answer_pre_checkout_query(
        pre_checkout_query_id=query_id, 
        ok=True,
    )

    if success:
        user.is_in_payment = False
        user.balance += total_amount
        user.save()

        transaction = Transaction(
            payment_id=query_id,
            amount=int(total_amount),
            user=user 
        )

        transaction.save()

        context.bot.send_message(
            chat_id=user.external_id,
            text='ü§ë –í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω. –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –±–æ—Ç–∞.'
        )
    
    else:
        context.bot.send_message(
            chat_id=user.external_id,
            text='üò± –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ. \n\n* –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º —É –≤–∞—Å —Å–ø–∏—Å–∞–ª–∏—Å—å —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–æ –±–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ @i_vovani –∏–ª–∏ @fathutnik –∏ –º—ã –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º.üòâ'
        )
    
@log_errors
def text_handler(update:Update, context:CallbackContext):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    user = user_get_by_update(update)

    if user.is_in_payment:
        user_message = update.message.text
        try:
            amt = int(user_message)
            if amt >= 1000:
                context.bot.send_message(
                    chat_id=user.external_id,
                    text=f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã—Å—ã–ª–∞—é —Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É <i><b>{amt}‚ÇΩ</b></i>.',
                    parse_mode=ParseMode.HTML
                ) 
                
                context.bot.send_invoice(
                    chat_id=user.external_id,
                    title='CAN Sentiment Analysis',
                    description=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–∞ —Å—É–º–º—É {amt}‚ÇΩ',
                    payload=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–∞ —Å—É–º–º—É {amt}‚ÇΩ',
                    provider_token='381764678:TEST:32365',
                    currency='RUB',
                    prices=[
                        LabeledPrice(
                            label='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
                            amount=int(f'{amt}00')
                        )
                    ]
                )

            else:
                user.is_in_payment = False
                user.save()
                context.bot.send_message(
                    chat_id=user.external_id,
                    text='üòµ‚Äçüí´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ—Å–∫–æ–ª—å–∫—É –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ - <i><b>1000‚ÇΩ</b></i>.',
                    parse_mode=ParseMode.HTML
                ) 
        except:
            user.is_in_payment = False
            user.save()
            context.bot.send_message(
                chat_id=user.external_id,
                text='üòµ‚Äçüí´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n1000 –∏–ª–∏ 3657 –∏–ª–∏ 1001. –û–±—ã—á–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.',
                parse_mode=ParseMode.HTML
            )

@log_errors
def balance_add_command_handler(update:Update, context:CallbackContext):
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user = user_get_by_update(update)
    user.is_in_payment = True
    user.save()
    
    context.bot.send_message(
        chat_id=user.external_id,
        text='ü§ë –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–µ–Ω–∏—è:\n\n*–º–∏–Ω–∏–∞–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - <i><b>1000‚ÇΩ</b></i>',
        parse_mode=ParseMode.HTML
    )
    
@log_errors
def balance_info(update:Update, context:CallbackContext):
    """
        –§—É–Ω–∫—Ü–∏—è, —Å–æ–æ–±—â–∞—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –±–∞–ª–∞–Ω—Å
    """
    user = user_get_by_update(update)

    context.bot.send_message(
        chat_id=user.external_id,
        text=f'–£–≤–∞–∂–∞–µ–º—ã–π {user.name}, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <i><b>{user.balance}‚ÇΩ</b></i>',
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëàüèº', callback_data='keyboard_main'),
                InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç üí∞', callback_data='balance_add')
            ],

        ]),
    )

    

class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞'

    def handle(self, *args, **kwargs):
        #1 - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        request = Request(
            connect_timeout = 0.5,
            read_timeout = 1.0
        )

        bot = Bot(
            request = request,
            token = settings.TELEGRAM_BOT_TOKEN,
        )

        #2 - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        updater = Updater(
            bot = bot,
            use_context = True,
        )

        ## –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
        start_handler = CommandHandler('start', start_command_handler)
        updater.dispatcher.add_handler(start_handler)

        menu_handler = CommandHandler('main', start_command_handler)
        updater.dispatcher.add_handler(menu_handler)

        menu_callback_handler = CallbackQueryHandler(start_command_handler, pattern='keyboard_main')
        updater.dispatcher.add_handler(menu_callback_handler)

        ## –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
        help_handler = CommandHandler('help', help_command_handler)
        updater.dispatcher.add_handler(help_handler)

        help_callback_handler = CallbackQueryHandler(help_command_handler, pattern='keyboard_help')
        updater.dispatcher.add_handler(help_callback_handler)

        ## –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
        updater.dispatcher.add_handler(PreCheckoutQueryHandler(pre_checkout_handler, pass_chat_data=True))
        updater.dispatcher.add_handler(CallbackQueryHandler(balance_info, pattern='balance_info'))
        updater.dispatcher.add_handler(CallbackQueryHandler(balance_add_command_handler, pattern='balance_add'))
        
    
        updater.dispatcher.add_handler(CommandHandler('balance_add', balance_add_command_handler))    
        updater.dispatcher.add_handler(MessageHandler(Filters.text, text_handler))

        #3 - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        updater.start_polling()
        updater.idle()
